//
//  MenuViewController.swift
//  PizzaMenu
//
//  Created by Анастасия Беспалова on 11.12.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol MenuDisplayLogic: AnyObject
{
    func updateTable(viewModel: Menu.FetchItems.ViewModel)
}

class MenuViewController: UIViewController, MenuDisplayLogic
{
    var interactor: MenuBusinessLogic?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MenuInteractor()
        let presenter = MenuPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    
    // MARK: View lifecycle
    
    var tableView: UITableView!
    var header = HeaderView()
    private var data: [DisplayedItem] = []
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        header.delegate = self
        view.backgroundColor = .white
        addTableView()
        addHeader()
        addNavigationBar()
        
        getItems()
    }
    
    func addTableView() {
        tableView = UITableView(frame: view.frame, style: .grouped)
        tableView.backgroundColor = .systemBackground
        view.addSubview(tableView)
        tableView.contentInset.top = MenuConstants.tableViewTop
        
        tableView.snp.makeConstraints() {
            $0.top.equalTo(view.safeAreaLayoutGuide.snp.top)
            $0.leading.equalTo(view.snp.leading)
            $0.trailing.equalTo(view.snp.trailing)
            $0.bottom.equalTo(view.snp.bottom)
        }
    }
    
    func addHeader() {
        
       view.addSubview(header)
        header.snp.makeConstraints {
            $0.leading.equalToSuperview()
            $0.trailing.equalToSuperview()
            $0.top.equalTo(view.safeAreaLayoutGuide.snp.top)
        }
    }
    
    func addNavigationBar() {
        navigationController?.navigationBar.barTintColor = .systemBackground
        navigationItem.leftBarButtonItem = .init(title: "Москва", style: .plain, target: nil, action: nil)
        navigationItem.leftBarButtonItem?.tintColor = .black
        navigationController?.navigationBar.setValue(true, forKey: "hidesShadow")
    }
    
    func updateTable(viewModel: Menu.FetchItems.ViewModel)
    {
        tableView.register(MenuItem.self, forCellReuseIdentifier: "MenuItem")
        tableView.delegate = self
        tableView.dataSource = self
        tableView.rowHeight = MenuConstants.tableRowHeight
        self.data = viewModel.displayedItems
        tableView.reloadData()
    }
    
    func getItems()
    {
        let request = Menu.FetchItems.Request()
        interactor?.getDisplayedItems(request: request)
    }
    
}

// MARK: - UITableViewDelegate, UITableViewDataSource, UIScrollViewDelegate methods

extension MenuViewController: UITableViewDelegate,
                              UITableViewDataSource,
                              UIScrollViewDelegate{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
      
        return data.count
    }
    
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "MenuItem", for: indexPath) as? MenuItem else { return .init() }
        
        // very bad code, but i don't know how to track otherwise :(
        // also don't know how to prevent flicker while switching through categories which have more than one category in between
        if indexPath.row % 4 != 3  {
            header.highlightCategory(index: data[indexPath.row].category.getIndex())
        }
       
        cell.setData(data[indexPath.row])
        return cell
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        self.tableViewDidScroll(offset: scrollView.contentOffset.y)
    }
    
    func tableViewDidScroll(offset: CGFloat) {
        let currentOffset = offset + MenuConstants.bannerHeightForOffset
        let finalOffset = currentOffset >= MenuConstants.bannerHeightForOffset ? -MenuConstants.bannerHeightForOffset : -currentOffset
        
        header.snp.updateConstraints {
            $0.top.equalTo(view.safeAreaLayoutGuide.snp.top).offset(finalOffset)
        }
    }
}

// MARK: - MenuSectionDelegate methods

extension MenuViewController: MenuSectionDelegate {
    func didSelectSegment(_ value: Categories) {
        if let index = data.firstIndex(where: {$0.category == value}) {
            tableView?.contentInset.top = MenuConstants.categoriesHeightForOffset
            tableView?.scrollToRow(at: IndexPath(row: index, section: 0), at: .top, animated: true)
            tableView?.contentInset.top = MenuConstants.bannerHeightForOffset
        }
    }
}
