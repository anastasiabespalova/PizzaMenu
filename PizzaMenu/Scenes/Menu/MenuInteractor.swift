//
//  MenuInteractor.swift
//  PizzaMenu
//
//  Created by Анастасия Беспалова on 11.12.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MenuBusinessLogic
{
    func getDisplayedItems(request: Menu.FetchItems.Request)
}

class MenuInteractor: MenuBusinessLogic
{
    var presenter: MenuPresentationLogic?
    var worker: MenuWorker?
    
    
    // MARK: Do something
    
    func getDisplayedItems(request: Menu.FetchItems.Request)
    {
        
        var response = Menu.FetchItems.Response.init(displayedItems: [])
        
        worker = MenuWorker()
        
        let group = DispatchGroup()
        group.enter()
        DispatchQueue.main.async {
            self.worker?.getRawItemsFromAPI()
            group.leave()
        }
        
        group.notify(queue: .main) {
            let myGroup = DispatchGroup()
            for rawItem in self.worker!.rawItems {
                myGroup.enter()
                var displayedImage: UIImage?
                self.getPhoto(from: rawItem, handler: { (image) -> Void in
                    if let image = image{
                        DispatchQueue.main.async {
                            displayedImage = image
                            response.displayedItems.append(
                                DisplayedItem(rawItem: rawItem, image: displayedImage))
                
                            myGroup.leave()
                        }
                    }
                })
            }
            
            myGroup.notify(queue: .main) {
                self.presenter?.presentDisplayedItems(response: response)
            }
        }
    }
    
    func getPhoto(from rawItem: ItemRaw?,  handler:@escaping (_ image:UIImage?)-> Void){
        guard let rawItem = rawItem else {
            return
        }
        
        guard let url = URL(string: "\(rawItem.img)") else
        {
            return
        }
        
        URLSession.shared.dataTask(with: url) { (data, response, error) in
            guard error == nil else { print(error!.localizedDescription); return }
            if let data = data {
                handler(UIImage(data: data))
            }
        }.resume()
    }
}
